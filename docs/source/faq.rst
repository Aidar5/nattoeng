Frequently Asked Questions (FAQ)
------------------------------

Here are some of the most frequently asked questions in reading
books.

How does this differ from the regular Python introductory course?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The main differences are three:

-  The basis is rather brief;
-  Implies a certain domain of knowledge (network-based equipment);
   оборудование);
-  All examples are, as far as possible, focused on network equipment.

I'm a network engineer. What do I need this book for?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First of all, to automate routine tasks. Automation provides
several advantages:

-  High-level thinking - it’s easier to rise above everything when you 
free of routine work. You’ll have time and opportunity to think of improvements;
-  Trust - you won’t be afraid to make changes that are often risky because the network is the backbone of every
 applications and the cost of error is high;
-  A coherent configuration - you will able to automatically create
 network configuration files, from users and interface descriptions to security functionality, 
and you’ll be less worried about whether you have forgotten something.

Of course, it won’t be that after reading the book, you "automate everything and happiness will come", but this is a step in this direction. I am in no way encouraging for all automation to be done via bunch of scripts. If there is some software that solves your needs, that’s great, use it. But if there isn’t, or if you are just haven’t thought about it yet, try to start with a simple - Ansible, for example, allows to perfrom many tasks almost "out of the box".

Why then learn Python? The fact is that the same Ansible won’t solve everything. And you may need to add some functionality independently. In addition, apart of equipment configuration adjustment, there are daily routine tasks that can be automated by Python. Let’s just say that if you don’t want to deal with Python, but want to
automate setup and operation processes, please turn attention on Ansible. Even "out of the box" it will be very useful.
Later, if you get taste for it and you want to add something that missed in Ansible, come back :-)

And yes, this course is not only about how to use Python for network equipment configuration and connecton to it.
It’s also about how to solve tasks that are not connected to the equipment. 
For example, change something in multiple configuration files or parse log-file - Python will help you solve theese tasks.

Why is this book specifically for network engineers?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Есть несколько причин:

-  сетевые инженеры уже обладают опытом работы в ИТ, и часть концепций
   им знакома, и, скорее всего, какие-то основы программирования
   большинству уже будут знакомы. Это означает, что будет гораздо проще
   разобраться с Python;
-  работа в командной строке и написание скриптов вряд ли испугает их;
-  у сетевых инженеров есть знакомая им предметная область, на которую
   можно опираться при составлении примеров и заданий.

Если рассказывать на абстрактных примерах "о котиках и зайчиках", это
одно. Но когда в примерах есть возможность использовать идеи из
предметной области, всё становится проще, рождаются конкретные идеи, как
улучшить какую-либо программу, скрипт. А когда человек пытается её
улучшить, он начинает разбираться с новым - это очень сильно помогает
продвигаться вперёд.

Почему именно Python?
~~~~~~~~~~~~~~~~~~~~~

Причины следующие:

-  в контексте работы с сетевым оборудованием, сейчас часто используется
   именно Python;
-  на некотором оборудовании Python встроен или есть API, который
   поддерживает Python;
-  Python достаточно прост для изучения (конечно, это относительно, и
   более простым может казаться другой язык, но, скорее, это будет из-за
   имеющегося опыта работы с языком, а не потому, что Python сложный);
-  с Python вы вряд ли быстро дойдете до границ возможностей языка;
-  Python может использоваться не только для написания скриптов, но и
   для разработки приложений. Разумеется, это не является задачей этой
   книги, но, по крайней мере, вы потратите время на язык, который
   позволит вам легко шагнуть дальше, чем написание простых скриптов;
-  из программ, связанных с сетями, на Python написан, например,
   `GNS3 <https://github.com/GNS3/>`__.

И еще один момент – в контексте книги, Python нужно рассматривать не как
единственно правильный вариант, и не как "правильный" язык. Нет, Python
это просто инструмент, как отвёртка например, и мы учимся им
пользоваться для конкретных задач. То есть, никакой идеологической
подоплеки здесь нет, никакого "только Python" и никакого поклонения тем
более. Странно поклоняться отвертке :-) Всё просто - есть хороший и
удобный инструмент, который подойдет к разным задачам. Он не лучший во
всём и далеко не единственный язык в принципе. Начните с него, и потом
вы сможете самостоятельно выбрать нечто другое, если захотите – эти
знания всё равно не пропадут.

Нужный мне модуль не поддерживает Python 3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Есть несколько вариантов решения:

-  попробуйте найти альтернативный модуль, который поддерживает Python 3
   (не обязательно последней версии языка);
-  попробуйте найти community-версию этого модуля для Python 3.
   Возможно, официальной версии нет, но сообщество могло перевести его
   самостоятельно на версию 3, особенно если этот модуль популярен;
-  используйте Python 2.7, ничего страшного не произойдет. Если вы не
   собираетесь писать огромное приложение, а просто используете Python
   для автоматизации своих задач, Python 2.7 совершенно точно подойдет.

Я не знаю, нужно ли мне это.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Я, конечно же, считаю, что нужно :-) Иначе я бы не писала эту книгу.
Совсем не факт, что вам захочется погружаться во всё это, поэтому для
начала попробуйте разобраться с `Ansible <book/Part_VI.md>`__. Возможно,
вам хватит надолго его возможностей. Начните с простых команд show,
попробуйте подключиться сначала к тестовому оборудованию (виртуальным
машинам), затем попробуйте выполнить команду show на реальной сети, на
2-3 устройствах, потом на большем количестве. Если вам этого будет
достаточно, можно остановиться на этом. Следующим шагом я бы попробовала
использование Ansible для генерации шаблонов конфигурации.

Зачем сетевому инженеру программирование?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

На мой взгляд, для сетевого инженера умение программировать очень важно,
и не потому, что сейчас все об этом говорят, или пугают SDN, потерей
работы или чем-то подобным, а потому, что сетевой инженер постоянно
сталкивается с:

-  рутинными задачами;
-  проблемами и решениями, которые надо протестировать;
-  большим объёмом однотипных и повторяющихся задач;
-  большим количеством оборудования;

На текущий момент большое количество оборудования по-прежнему предлагает
нам только интерфейс командной строки и неструктурированный вывод
команд. Управляющий софт часто ограничен вендором, дорого стоит и имеет
урезанные возможности – в итоге мы вручную снова и снова делаем одно и
то же. Даже такие банальные вещи, как отправить одну и ту же команду
show на 20 устройств, не всегда просто сделать. Допустим, ваш SSH-клиент
поддерживает эту возможность. А если вам теперь надо проанализировать
вывод? Мы ограничены теми средствами, которые нам дали, а знание
программирования, даже самое базовое, позволяет нам расширить наши
средства и даже создавать новые. Я не считаю, что всем надо торопиться
учиться программировать, но для инженера это очень важный навык. Именно
для инженера, а не для всех на свете.

Сейчас явно наблюдается тенденция, которую можно описать фразой "все
учимся программировать", и это, в целом, хорошо. Но программирование это
не что-то элементарное, это сложно, в это нужно вкладывать много
времени, особенно если вы никогда не имели отношения к техническому
миру. Может сложиться впечатление, что достаточно пройти "вот эти вот
курсы" и через 3 месяца вы крутой программист с высокой зарплатой. Нет,
этот книга не об этом :-) Мы не говорим в ней о программировании как
профессии и не ставим такую цель, мы говорим о программировании как
инструменте, таком как, например, знание CLI Linux. Дело не в том, что
инженеры какие-то особенные, просто, как правило:

-  они уже имеют техническое образование;
-  многие работают, так или иначе, с командной строкой;
-  они сталкивались, как минимум, с одним языком программирования;
-  у них "инженерный склад ума".

Это не значит, что всем остальным "не дано". Просто инженерам это будет
проще.

Книга будет когда-то платной?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Нет, эта книга всегда будет бесплатной. Я читаю платно `онлайн курс
"Python для сетевых
инженеров" <https://natenka.github.io/pyneng-online/>`__, но это не
будет влиять на эту книгу - она всегда будет бесплатной.
